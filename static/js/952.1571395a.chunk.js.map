{"version":3,"file":"static/js/952.1571395a.chunk.js","mappings":"2SAGaA,EAAM,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAW,OAAAH,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,EAEnBC,EAAAA,GAAMC,IAAI,GAADC,OAAIC,wBAA6B,KAAAD,QAAIE,EAAAA,EAAAA,IAAgBC,EAAAA,EAAaC,aAAc,IAAG,KAAAJ,OAAIP,EAAW,sDAAqD,KAAD,SAAAE,EAAAU,OAAA,SAAAV,EAAAW,MAAA,cAAAX,EAAAC,KAAA,EAAAD,EAAAY,GAAAZ,EAAA,SAAAA,EAAAU,OAAA,SAErKG,QAAQC,OAAOd,EAAAY,GAAMG,OAAK,wBAAAf,EAAAgB,OAAA,GAAAnB,EAAA,kBAExC,gBANkBoB,GAAA,OAAAxB,EAAAyB,MAAA,KAAAC,UAAA,KAQNC,EAAU,eAAAC,GAAA3B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA0B,EAAOxB,EAAayB,GAAM,OAAA5B,EAAAA,EAAAA,KAAAI,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,cAAAsB,EAAAvB,KAAA,EAAAuB,EAAAtB,KAAA,EAE/BC,EAAAA,GAAMC,IAAI,GAADC,OAAIC,wBAA6B,KAAAD,QAAIE,EAAAA,EAAAA,IAAgBC,EAAAA,EAAaC,aAAc,IAAG,KAAAJ,OAAIP,EAAW,4BAAAO,OAA2BkB,EAAM,uCAAsC,KAAD,SAAAC,EAAAd,OAAA,SAAAc,EAAAb,MAAA,cAAAa,EAAAvB,KAAA,EAAAuB,EAAAZ,GAAAY,EAAA,SAAAA,EAAAd,OAAA,SAEvLG,QAAQC,OAAOU,EAAAZ,GAAMG,OAAK,wBAAAS,EAAAR,OAAA,GAAAM,EAAA,kBAExC,gBANsBG,EAAAC,GAAA,OAAAL,EAAAH,MAAA,KAAAC,UAAA,K,oDCMR,SAASQ,IACpB,IAAAC,GAA8BC,EAAAA,EAAAA,WAAS,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA5BI,GAAFF,EAAA,GAAYA,EAAA,IAE1BG,GAA0BJ,EAAAA,EAAAA,UAAS,MAAKK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GACtBG,GAAgCR,EAAAA,EAAAA,UAAS,IAAGS,GAAAP,EAAAA,EAAAA,GAAAM,EAAA,GAArCE,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAA8BZ,EAAAA,EAAAA,UAAS,IAAGa,GAAAX,EAAAA,EAAAA,GAAAU,EAAA,GAAnCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,IAE1BG,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAa,eAAArD,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAkD,EAAA,OAAApD,EAAAA,EAAAA,KAAAI,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAEiB8C,EAAAA,EAAAA,MAAiB,KAAD,EAAzCD,EAAgB/C,EAAAW,KACtB6B,EAAYO,EAAiBhC,KAAKkC,OAAOjD,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAY,GAAAZ,EAAA,SAEzCkD,QAAQf,MAAM,2BAA0BnC,EAAAY,IAAS,yBAAAZ,EAAAgB,OAAA,GAAAnB,EAAA,kBAExD,kBAPkB,OAAAJ,EAAAyB,MAAA,KAAAC,UAAA,KASnB2B,GACJ,GAAG,KAEHD,EAAAA,EAAAA,YAAU,WACN,IAAMM,EAAY,eAAA9B,GAAA3B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA0B,IAAA,IAAA8B,EAAAC,EAAAC,EAAAC,EAAA,OAAA5D,EAAAA,EAAAA,KAAAI,MAAA,SAAAyD,GAAA,cAAAA,EAAAvD,KAAAuD,EAAAtD,MAAA,OACXkD,EAAc,GAAEC,GAAAI,EAAAA,EAAAA,GACAlB,GAAQiB,EAAAvD,KAAA,EAAAsD,GAAA5D,EAAAA,EAAAA,KAAAC,MAAA,SAAA2D,IAAA,IAAAG,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAnE,EAAAA,EAAAA,KAAAI,MAAA,SAAAgE,GAAA,cAAAA,EAAA9D,KAAA8D,EAAA7D,MAAA,OAAZ,OAAPwD,EAAOJ,EAAAL,MAAAc,EAAA9D,KAAA,EAAA8D,EAAA7D,KAAA,EAEkB8D,EAAYN,EAAQO,MAAM,KAAD,EAA/CN,EAAaI,EAAApD,KAAAiD,GAAAH,EAAAA,EAAAA,GACAE,EAAc5C,KAAKkC,OAAKc,EAAA9D,KAAA,EAAA6D,GAAAnE,EAAAA,EAAAA,KAAAC,MAAA,SAAAkE,IAAA,IAAAI,EAAAC,EAAA,OAAAxE,EAAAA,EAAAA,KAAAI,MAAA,SAAAyB,GAAA,cAAAA,EAAAvB,KAAAuB,EAAAtB,MAAA,OAA5B,OAAJgE,EAAIL,EAAAZ,MAAAzB,EAAAtB,KAAA,EACmBkB,EAAWsC,EAAQO,KAAMC,EAAKE,IAAG,OACrB,KADpCD,EAAe3C,EAAAb,MACDI,KAAKkC,MAAMoB,OAC3BjC,EAAS,oBAET+B,EAAgBpD,KAAKkC,MAAMqB,SAAQ,SAAAC,GAC/BnB,EAAYoB,KAAK,CACbJ,GAAIG,EAAOE,SACX3E,YAAa4D,EAAQO,KACrBS,SAAUR,EAAKD,KACfU,OAAQJ,EAAOI,OAAOV,KACtBW,KAAML,EAAOI,OAAOC,KACpBC,QAASN,EAAOO,SAExB,IACH,wBAAAtD,EAAAR,OAAA,GAAA8C,EAAA,IAAAF,EAAAmB,IAAA,WAAAlB,EAAAD,EAAAoB,KAAAC,KAAA,CAAAlB,EAAA7D,KAAA,gBAAA6D,EAAAmB,cAAApB,IAAA,iBAAAC,EAAA7D,KAAA,gBAAA6D,EAAA7D,KAAA,iBAAA6D,EAAA9D,KAAA,GAAA8D,EAAAoB,GAAApB,EAAA,SAAAH,EAAAwB,EAAArB,EAAAoB,IAAA,eAAApB,EAAA9D,KAAA,GAAA2D,EAAAyB,IAAAtB,EAAAuB,OAAA,YAAAvB,EAAA7D,KAAA,iBAAA6D,EAAA9D,KAAA,GAAA8D,EAAAwB,GAAAxB,EAAA,SAGLb,QAAQf,MAAM,sCAAD9B,OAAuCqD,EAAQO,KAAI,KAAAF,EAAAwB,IAChEnD,EAAS,sCAAD/B,OAAuCqD,EAAQO,OAAQ,yBAAAF,EAAA/C,OAAA,GAAAuC,EAAA,+BAAAF,EAAA0B,IAAA,WAAAzB,EAAAD,EAAA2B,KAAAC,KAAA,CAAAzB,EAAAtD,KAAA,eAAAsD,EAAA0B,cAAA3B,IAAA,eAAAC,EAAAtD,KAAA,eAAAsD,EAAAtD,KAAA,iBAAAsD,EAAAvD,KAAA,GAAAuD,EAAA2B,GAAA3B,EAAA,SAAAH,EAAA+B,EAAA5B,EAAA2B,IAAA,eAAA3B,EAAAvD,KAAA,GAAAoD,EAAAgC,IAAA7B,EAAA8B,OAAA,YAGvE1C,EAAWQ,GACXpB,GAAW,GAAO,yBAAAwB,EAAAxC,OAAA,GAAAM,EAAA,yBACrB,kBA7BiB,OAAAD,EAAAH,MAAA,KAAAC,UAAA,KA+BdoB,EAAS8B,OAAS,GAClBlB,GAER,GAAG,CAACZ,IAeJ,OACIiD,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,UACIF,EAAAA,EAAAA,KAACG,EAAAA,EAAQ,CACLC,SAAS,EACTC,OAAOL,EAAAA,EAAAA,KAACM,EAAAA,EAAgB,CAAC1B,GAAG,cAAesB,SAE1CvD,GACG4D,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAEC,QAAS,OAAQC,UAAW,SAAUC,MAAO,OAAQT,SAAA,EAC/DF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,UACJF,EAAAA,EAAAA,KAAA,KAAAE,SAAIvD,QAGR4D,EAAAA,EAAAA,MAAAN,EAAAA,SAAA,CAAAC,SAAA,EACIF,EAAAA,EAAAA,KAAA,MAAAE,SAAI,sCACJF,EAAAA,EAAAA,KAAA,OAAKQ,MAAO,CAAEI,MAAO,QAASV,UAC1BK,EAAAA,EAAAA,MAACM,IAAQ,CACLC,WAAY3D,EACZ4D,aAAa,EACbC,uBAAuB,EACvBC,qBAAqB,EACrBC,iBAAiB,EACjBC,cAAc,EACdC,iBAAiB,EACjBC,uBAAuB,EACvBC,mBAAmB,EACnBC,OAAQ,IACRX,MAAM,OAAMV,SAAA,EAEZF,EAAAA,EAAAA,KAACwB,EAAAA,SAAQ,CAACC,eAAe,KACzBzB,EAAAA,EAAAA,KAAC0B,EAAAA,WAAU,CAACC,SAAS,KACrB3B,EAAAA,EAAAA,KAAC4B,EAAAA,OAAM,CAACC,gBAAiB,MACzB7B,EAAAA,EAAAA,KAAC8B,EAAAA,MAAK,CACFC,sBAAsB,EACtBC,iBAAkB,CAAC,GAAI,GAAI,KAC3BC,UAAU,KAEd1B,EAAAA,EAAAA,MAAC2B,EAAAA,QAAO,CAAAhC,SAAA,EACJF,EAAAA,EAAAA,KAACmC,EAAAA,KAAI,CAAC1D,KAAK,gBACXuB,EAAAA,EAAAA,KAACmC,EAAAA,KAAI,CAAC1D,KAAK,kBACXuB,EAAAA,EAAAA,KAACmC,EAAAA,KAAI,CAAC1D,KAAK,4BAGfuB,EAAAA,EAAAA,KAACoC,EAAAA,OAAM,CACHC,UAAU,cACVC,QAAQ,eACR1B,MAAO,IACP2B,WAAY,KAEhBvC,EAAAA,EAAAA,KAACoC,EAAAA,OAAM,CACHC,UAAU,WACVC,QAAQ,kBACR1B,MAAO,OAEXZ,EAAAA,EAAAA,KAACoC,EAAAA,OAAM,CACHC,UAAU,SACVC,QAAQ,SACR1B,MAAO,OAEXZ,EAAAA,EAAAA,KAACoC,EAAAA,OAAM,CACHC,UAAU,OACVC,QAAQ,OACR1B,MAAO,IACP4B,WAlEb,SAACjH,GAChB,OAAOA,EAAKkC,MAAQgF,IAAOlH,EAAKkC,OAAOiF,OAAO,OAAS,EAC3D,KAkE4B1C,EAAAA,EAAAA,KAACoC,EAAAA,OAAM,CACHC,UAAU,KACVC,QAAQ,YACR1B,MAAO,IACP4B,WAhFT,SAACjH,GACpB,OACIyE,EAAAA,EAAAA,KAAA,QAAMQ,MAAO,CAAEmC,WAAY,YAAaC,OAAQ,WAAavC,MAAO9E,EAAKkC,MAAMyC,SAC1E3E,EAAKkC,MAAQlC,EAAKkC,MAAMoF,UAAU,EAAG,IAAM,IAGxD,EA2EgCC,UAAU,YAEd9C,EAAAA,EAAAA,KAACoC,EAAAA,OAAM,CACHC,UAAU,UACVC,QAAQ,UACR1B,MAAO,iBAS3C,C","sources":["api/ReposApi.js","pages/admin/repo-list.js"],"sourcesContent":["import axios from 'utils/axios';\r\nimport { getStorageValue, STORAGE_KEYS } from 'utils/storage';\r\n\r\nexport const GetAll = async (projectName) => {\r\n    try {\r\n        return await axios.get(`${process.env.REACT_APP_API_URL}/${getStorageValue(STORAGE_KEYS.ORGANIZATION, '')}/${projectName}/_apis/git/repositories?api-version=7.1-preview.1`);\r\n    } catch (error) {\r\n        return Promise.reject(error.data);\r\n    }\r\n};\r\n\r\nexport const GetCommits = async (projectName, repoId) => {\r\n    try {\r\n        return await axios.get(`${process.env.REACT_APP_API_URL}/${getStorageValue(STORAGE_KEYS.ORGANIZATION, '')}/${projectName}/_apis/git/repositories/${repoId}/commits?api-version=7.1-preview.1`);\r\n    } catch (error) {\r\n        return Promise.reject(error.data);\r\n    }\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\n\r\n// DevExtreme\r\nimport DataGrid, { Column, Grouping, GroupPanel, Paging, Pager, Toolbar, Item } from 'devextreme-react/data-grid';\r\n\r\n// project imports\r\nimport MainCard from 'components/MainCard';\r\n\r\nimport { GetAll as GetAllRepos, GetCommits } from 'api/ReposApi';\r\nimport { GetAll as GetAllProjects } from 'api/ProjectsApi';\r\n\r\n// third-party\r\nimport { FormattedMessage } from 'react-intl';\r\nimport moment from 'moment';\r\n\r\n// ==============================|| REPO LIST ||============================== //\r\n\r\nexport default function RepoList() {\r\n    const [loading, setLoading] = useState(true);\r\n    // error sadece bir projede olsa da sayfaya basÄ±yor. oysa ki tÃ¼m projelerde length 0 ise hata vermesi gerekiyor.\r\n    const [error, setError] = useState(null);\r\n    const [projects, setProjects] = useState([]);\r\n    const [commits, setCommits] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchProjects = async () => {\r\n            try {\r\n                const projectsResponse = await GetAllProjects();\r\n                setProjects(projectsResponse.data.value);\r\n            } catch (error) {\r\n                console.error('Error fetching projects:', error);\r\n            }\r\n        };\r\n\r\n        fetchProjects();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const fetchCommits = async () => {\r\n            const commitsData = [];\r\n            for (const project of projects) {\r\n                try {\r\n                    const reposResponse = await GetAllRepos(project.name);\r\n                    for (const repo of reposResponse.data.value) {\r\n                        const commitsResponse = await GetCommits(project.name, repo.id)\r\n                        if (commitsResponse.data.value.length === 0) {\r\n                            setError('No commits found');\r\n                        } else {\r\n                            commitsResponse.data.value.forEach(commit => {\r\n                                commitsData.push({\r\n                                    id: commit.commitId,\r\n                                    projectName: project.name,\r\n                                    repoName: repo.name,\r\n                                    author: commit.author.name,\r\n                                    date: commit.author.date,\r\n                                    message: commit.comment\r\n                                });\r\n                            });\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.error(`Error fetching commits for project ${project.name}:`, error);\r\n                    setError(`Error fetching commits for project ${project.name}`);\r\n                }\r\n            }\r\n            setCommits(commitsData);\r\n            setLoading(false);\r\n        };\r\n\r\n        if (projects.length > 0) {\r\n            fetchCommits();\r\n        }\r\n    }, [projects]);\r\n\r\n    // DevExtreme iÃ§in cell render fonksiyonlarÄ±\r\n    const renderCommitId = (data) => {\r\n        return (\r\n            <span style={{ fontFamily: 'monospace', cursor: 'pointer' }} title={data.value}>\r\n                {data.value ? data.value.substring(0, 10) : ''}\r\n            </span>\r\n        );\r\n    };\r\n\r\n    const renderDate = (data) => {\r\n        return data.value ? moment(data.value).format('LLL') : '';\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <MainCard\r\n                content={false}\r\n                title={<FormattedMessage id=\"repo-list\" />}\r\n            >\r\n                {error ? (\r\n                    <div style={{ padding: '20px', textAlign: 'center', color: 'red' }}>\r\n                        <h3>Hata</h3>\r\n                        <p>{error}</p>\r\n                    </div>\r\n                ) : (\r\n                    <>\r\n                        <h1>Last Commits Across Organization</h1>\r\n                        <div style={{ width: '100%' }}>\r\n                            <DataGrid\r\n                                dataSource={commits}\r\n                                showBorders={true}\r\n                                allowColumnReordering={true}\r\n                                allowColumnResizing={true}\r\n                                columnAutoWidth={true}\r\n                                showRowLines={true}\r\n                                showColumnLines={true}\r\n                                rowAlternationEnabled={true}\r\n                                hoverStateEnabled={true}\r\n                                height={600}\r\n                                width=\"100%\"\r\n                            >\r\n                                <Grouping autoExpandAll={true} />\r\n                                <GroupPanel visible={true} />\r\n                                <Paging defaultPageSize={50} />\r\n                                <Pager\r\n                                    showPageSizeSelector={true}\r\n                                    allowedPageSizes={[25, 50, 100]}\r\n                                    showInfo={true}\r\n                                />\r\n                                <Toolbar>\r\n                                    <Item name=\"groupPanel\" />\r\n                                    <Item name=\"exportButton\" />\r\n                                    <Item name=\"columnChooserButton\" />\r\n                                </Toolbar>\r\n                                \r\n                                <Column \r\n                                    dataField=\"projectName\" \r\n                                    caption=\"Project Name\" \r\n                                    width={150}\r\n                                    groupIndex={0}\r\n                                />\r\n                                <Column \r\n                                    dataField=\"repoName\" \r\n                                    caption=\"Repository Name\" \r\n                                    width={150}\r\n                                />\r\n                                <Column \r\n                                    dataField=\"author\" \r\n                                    caption=\"Author\" \r\n                                    width={150}\r\n                                />\r\n                                <Column \r\n                                    dataField=\"date\" \r\n                                    caption=\"Date\" \r\n                                    width={200}\r\n                                    cellRender={renderDate}\r\n                                />\r\n                                <Column \r\n                                    dataField=\"id\" \r\n                                    caption=\"Commit ID\" \r\n                                    width={120}\r\n                                    cellRender={renderCommitId}\r\n                                    alignment=\"center\"\r\n                                />\r\n                                <Column \r\n                                    dataField=\"message\" \r\n                                    caption=\"Message\" \r\n                                    width={300}\r\n                                />\r\n                            </DataGrid>\r\n                        </div>\r\n                    </>\r\n                )}\r\n            </MainCard>\r\n        </>\r\n    );\r\n}\r\n"],"names":["GetAll","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","projectName","wrap","_context","prev","next","axios","get","concat","process","getStorageValue","STORAGE_KEYS","ORGANIZATION","abrupt","sent","t0","Promise","reject","data","stop","_x","apply","arguments","GetCommits","_ref2","_callee2","repoId","_context2","_x2","_x3","RepoList","_useState","useState","_useState2","_slicedToArray","setLoading","_useState3","_useState4","error","setError","_useState5","_useState6","projects","setProjects","_useState7","_useState8","commits","setCommits","useEffect","fetchProjects","projectsResponse","GetAllProjects","value","console","fetchCommits","commitsData","_iterator","_step","_loop","_context4","_createForOfIteratorHelper","project","reposResponse","_iterator2","_step2","_loop2","_context3","GetAllRepos","name","repo","commitsResponse","id","length","forEach","commit","push","commitId","repoName","author","date","message","comment","s","n","done","delegateYield","t1","e","f","finish","t2","_jsx","_Fragment","children","MainCard","content","title","FormattedMessage","_jsxs","style","padding","textAlign","color","width","DataGrid","dataSource","showBorders","allowColumnReordering","allowColumnResizing","columnAutoWidth","showRowLines","showColumnLines","rowAlternationEnabled","hoverStateEnabled","height","Grouping","autoExpandAll","GroupPanel","visible","Paging","defaultPageSize","Pager","showPageSizeSelector","allowedPageSizes","showInfo","Toolbar","Item","Column","dataField","caption","groupIndex","cellRender","moment","format","fontFamily","cursor","substring","alignment"],"sourceRoot":""}