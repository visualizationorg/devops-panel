{"version":3,"file":"static/js/539.ef172385.chunk.js","mappings":"wXAmCA,SAASA,EAAUC,GAAqC,IAAlCC,EAAID,EAAJC,KAAMC,EAAYF,EAAZE,aAAcC,EAASH,EAATG,UAChCC,GAASC,EAAAA,EAAAA,KACTC,GAAYC,EAAAA,EAAAA,GAAgBH,EAAQI,EAAAA,IAE1C,OACIC,EAAAA,EAAAA,KAACC,EAAAA,EAAa,CACVC,QAAQ,WACRC,MAAM,UACNC,MAAM,UACNV,UAAWA,EACXW,MAAOR,EACPL,KAAMA,EAAO,EACbc,SAAU,SAACC,EAAOC,GACdf,EAAac,EAAOC,EAAU,EAClC,GAGZ,CAiBA,SAASC,EAAiBC,GACtB,OAAOV,EAAAA,EAAAA,KAACW,EAAAA,GAAcC,EAAAA,EAAAA,GAAA,CAACC,iBAAkBvB,GAAgBoB,GAC7D,CAEA,SAASI,IACL,OACId,EAAAA,EAAAA,KAACe,EAAAA,EAAM,CAACC,UAAW,kBAAMC,SAASC,eAAe,eAAe,EAACC,UAC7DnB,EAAAA,EAAAA,KAACoB,EAAAA,EAAsB,CAAClB,QAAQ,WAAWmB,KAAK,WAG5D,CAGe,SAASC,EAAaZ,GAAQ,IAADa,EAClCC,GAAQC,EAAAA,EAAAA,KACRC,GAAOC,EAAAA,EAAAA,KAEPC,GAAaC,EAAAA,EAAAA,UACf,WACI,MAAuB,OAAnBL,EAAMM,SACCC,EAAAA,EAAKC,WAAWC,YAAYC,aAAaN,WAGzCO,EAAAA,EAAKH,WAAWC,YAAYC,aAAaN,UACxD,GAEA,CAACJ,EAAOE,IAGZ,OACI1B,EAAAA,EAAAA,KAACoC,EAAAA,IAAQxB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACDF,GAAK,IACTkB,YAAUhB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACHgB,GAAU,IACbS,oBAAkBzB,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAA,GACXgB,EAAWS,oBAAkB,IAChCC,mBAAoB,SAAAC,GAAA,IAAGC,EAAID,EAAJC,KAAMC,EAAEF,EAAFE,GAAIpC,EAAKkC,EAALlC,MAAK,SAAAqC,OAC/BF,EAAI,KAAAE,OAAID,EAAE,OAAAC,OAAMrC,EAAK,MAGpCsC,kBAAgB,EAChBC,gBAAiB,SAACC,GAAM,OACpBA,EAAOC,2BAA6B,IAAM,EAAI,OAAS,KAAK,EAEhEC,IAAEnC,EAAAA,EAAAA,IAAAoC,EAAAA,EAAAA,GAAA,SAAAN,OACSO,EAAAA,EAAYC,IAAG,SAAW1B,EAAM2B,QAAQC,OAASC,EAAAA,GAAUC,MAAS,CACvEC,gBAAiB/B,EAAM2B,QAAQK,WAAWC,QAC1C,yBAA0B,CACtBF,gBAAiB/B,EAAM2B,QAAQO,QAC/B,uBAAwB,CACpBH,gBAAiB,iBAGzB,CAAC,GACF7C,EAAMqC,IAEbY,OAAK/C,EAAAA,EAAAA,GAAA,CAAIgD,WAAYnD,EAAkBoD,QAAS/C,GAAkBJ,EAAMiD,OASxEG,aAAc,CACVF,WAAY,CACRG,gBAAiB,CACbC,SAAwB,QAAhBzC,EAAEb,EAAMsD,gBAAQ,IAAAzC,EAAAA,EAAI,MAKxC0C,gBAAiB,CAAC,GAAI,GAAI,GAAI,KAC9BC,YAAY,EACZC,4BAA0B,EAC1BC,mBAAiB,EACjBC,qBAAmB,EACnBC,uBAAqB,EACrBC,wBAAsB,IAGlC,C,yJCzDA,UAjFyB,WACrB,IAAAC,GAA8BC,EAAAA,EAAAA,WAAS,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAArCI,EAAOF,EAAA,GAAEG,EAAUH,EAAA,GAC1BI,GAA4BL,EAAAA,EAAAA,UAAS,IAAGM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAjCE,EAAMD,EAAA,GAAEE,EAASF,EAAA,GACxBG,GAAgCT,EAAAA,EAAAA,UAAS,IAAGU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA3BE,GAAFD,EAAA,GAAaA,EAAA,KAE5BE,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,eAAA/F,GAAAgG,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAR,EAAAA,EAAAA,KAAAS,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAGqBC,EAAAA,EAAAA,MAAS,KAAD,EAAjCV,EAAgBO,EAAAI,KAChBV,EAAeD,EAAiBY,KAAKC,OAAS,GACpDpB,EAAYQ,GAGNC,EAAa,GAAEC,GAAAW,EAAAA,EAAAA,GACCb,GAAYM,EAAAC,KAAA,EAAAH,GAAAR,EAAAA,EAAAA,KAAAC,MAAA,SAAAO,IAAA,IAAAU,EAAAC,EAAA,OAAAnB,EAAAA,EAAAA,KAAAS,MAAA,SAAAW,GAAA,cAAAA,EAAAT,KAAAS,EAAAR,MAAA,OAAhB,OAAPM,EAAOX,EAAAS,MAAAI,EAAAT,KAAA,EAAAS,EAAAR,KAAA,GAEmBS,EAAAA,EAAAA,IAAgBH,EAAQI,MAAM,KAAD,GAApDH,EAAcC,EAAAN,MACDC,KAAKlG,MAAQ,GAC5BsG,EAAeJ,KAAKC,MAAMO,SAAQ,SAAAC,GAC9BnB,EAAWoB,KAAK,CACZC,GAAIF,EAAME,GACVC,YAAaT,EAAQI,KACrBM,YAAaJ,EAAMI,YACnBC,OAAQL,EAAMK,OACdC,OAAQN,EAAMM,OACdC,OAAQP,EAAMO,OACdC,UAAWR,EAAMQ,UACjBC,WAAYT,EAAMS,YAE1B,IACHb,EAAAR,KAAA,gBAAAQ,EAAAT,KAAA,EAAAS,EAAAc,GAAAd,EAAA,SAEDe,QAAQC,MAAM,qCAADlF,OAAsCgE,EAAQI,KAAI,KAAAF,EAAAc,IAAY,yBAAAd,EAAAiB,OAAA,GAAA7B,EAAA,iBAAAF,EAAAgC,IAAA,YAAA/B,EAAAD,EAAAiC,KAAAC,KAAA,CAAA9B,EAAAE,KAAA,gBAAAF,EAAA+B,cAAAjC,IAAA,iBAAAE,EAAAE,KAAA,iBAAAF,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAgC,GAAAhC,EAAA,SAAAJ,EAAAqC,EAAAjC,EAAAgC,IAAA,eAAAhC,EAAAC,KAAA,GAAAL,EAAAsC,IAAAlC,EAAAmC,OAAA,YAGnFpD,EAAUY,GACVhB,GAAW,GAAOqB,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAoC,GAAApC,EAAA,SAElByB,QAAQC,MAAM,uBAAsB1B,EAAAoC,IACpCzD,GAAW,GAAO,yBAAAqB,EAAA2B,OAAA,GAAAnC,EAAA,gCAEzB,kBApCc,OAAAnG,EAAAgJ,MAAA,KAAAC,UAAA,KAsCflD,GACJ,GAAG,IAEH,IAAMmD,EAAU,CACZ,CAAEC,MAAO,KAAMC,WAAY,KAAMC,MAAO,GAAIC,YAAa,SAAUC,MAAO,UAC1E,CAAEJ,MAAO,cAAeC,WAAY,eAAgBC,MAAO,KAC3D,CAAEF,MAAO,cAAeC,WAAY,eAAgBC,MAAO,KAC3D,CAAEF,MAAO,SAAUC,WAAY,SAAUC,MAAO,IAAKC,YAAa,SAAUC,MAAO,UACnF,CAAEJ,MAAO,SAAUC,WAAY,SAAUC,MAAO,IAAKC,YAAa,SAAUC,MAAO,UACnF,CAAEJ,MAAO,SAAUC,WAAY,SAAUC,MAAO,IAAKC,YAAa,SAAUC,MAAO,UACnF,CACIJ,MAAO,YACPC,WAAY,aACZC,MAAO,IACPG,WAAY,SAAClG,GAAM,OAAKmG,QAAQnG,EAAO2D,QAAUyC,IAAOpG,EAAO2D,OAAO0C,OAAO,MAAM,GAEvF,CACIR,MAAO,aACPC,WAAY,cACZC,MAAO,IACPG,WAAY,SAAClG,GAAM,OAAKmG,QAAQnG,EAAO2D,QAAUyC,IAAOpG,EAAO2D,OAAO0C,OAAO,MAAM,IAI3F,OACIlJ,EAAAA,EAAAA,KAACmJ,EAAAA,EAAQ,CAACC,MAAM,gBAAejI,UAC3BnB,EAAAA,EAAAA,KAACqJ,EAAAA,EAAU,CACPC,KAAMC,MAAMC,QAAQxE,GAAUA,EAAS,GACvCyD,QAASA,EAETgB,aAAc,iBAAM,MAAM,EAC1B7E,QAASA,KAIzB,C","sources":["components/DataGrid.js","pages/builds/build-history.js"],"sourcesContent":["import { useMemo } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n// material-ui\r\nimport { useTheme } from '@mui/material/styles';\r\nimport { Portal } from '@mui/base/Portal';\r\nimport { Pagination as MuiPagination } from '@mui/material';\r\n\r\n// mui data grid\r\nimport {\r\n    DataGrid,\r\n    // GridActionsCellItem,\r\n    // GridColumnMenu,\r\n    gridClasses,\r\n    gridPageCountSelector,\r\n    GridPagination,\r\n    // GridToolbar,\r\n    // GridToolbarColumnsButton,\r\n    // GridToolbarContainer,\r\n    // GridToolbarDensitySelector,\r\n    // GridToolbarFilterButton,\r\n    GridToolbarQuickFilter,\r\n    trTR,\r\n    enUS,\r\n    useGridApiContext,\r\n    useGridSelector\r\n} from '@mui/x-data-grid';\r\n\r\n// project-import\r\nimport { ThemeMode } from 'config';\r\n\r\n// third-party\r\nimport { useIntl } from 'react-intl';\r\n\r\n// ==============================|| GRID PAGINATION ||============================== //\r\nfunction Pagination({ page, onPageChange, className }) {\r\n    const apiRef = useGridApiContext();\r\n    const pageCount = useGridSelector(apiRef, gridPageCountSelector);\r\n\r\n    return (\r\n        <MuiPagination\r\n            variant=\"outlined\"\r\n            shape=\"rounded\"\r\n            color=\"primary\"\r\n            className={className}\r\n            count={pageCount}\r\n            page={page + 1}\r\n            onChange={(event, newPage) => {\r\n                onPageChange(event, newPage - 1);\r\n            }}\r\n        />\r\n    );\r\n};\r\n\r\nPagination.propTypes = {\r\n    className: PropTypes.string,\r\n    /**\r\n     * Callback fired when the page is changed.\r\n     *\r\n     * @param {React.MouseEvent<HTMLButtonElement> | null} event The event source of the callback.\r\n     * @param {number} page The page selected.\r\n     */\r\n    onPageChange: PropTypes.func.isRequired,\r\n    /**\r\n     * The zero-based index of the current page.\r\n     */\r\n    page: PropTypes.number.isRequired,\r\n};\r\n\r\nfunction CustomPagination(props) {\r\n    return <GridPagination ActionsComponent={Pagination} {...props} />;\r\n};\r\n\r\nfunction CustomToolbar() {\r\n    return (\r\n        <Portal container={() => document.getElementById('filter-panel')}>\r\n            <GridToolbarQuickFilter variant=\"outlined\" size=\"small\" />\r\n        </Portal>\r\n    );\r\n};\r\n\r\n// ==============================|| GRID SKELETON ||============================== //\r\nexport default function GridSkeleton(props) {\r\n    const theme = useTheme();\r\n    const intl = useIntl();\r\n\r\n    const localeText = useMemo(\r\n        () => {\r\n            if (theme.language === 'tr')\r\n                return trTR.components.MuiDataGrid.defaultProps.localeText;\r\n            // else if (theme.language === 'en')\r\n            else\r\n                return enUS.components.MuiDataGrid.defaultProps.localeText;\r\n        },\r\n        // eslint-disable-next-line\r\n        [theme, intl]\r\n    );\r\n\r\n    return (\r\n        <DataGrid\r\n            {...props}\r\n            localeText={{\r\n                ...localeText,\r\n                MuiTablePagination: {\r\n                    ...localeText.MuiTablePagination,\r\n                    labelDisplayedRows: ({ from, to, count }) =>\r\n                        `${from}-${to} / ${count}`,\r\n                },\r\n            }}\r\n            ignoreDiacritics\r\n            getRowClassName={(params) =>\r\n                params.indexRelativeToCurrentPage % 2 === 0 ? 'even' : 'odd'\r\n            }\r\n            sx={{\r\n                [`& .${gridClasses.row}.even`]: (theme.palette.mode === ThemeMode.LIGHT) ? {\r\n                    backgroundColor: theme.palette.background.default,\r\n                    '&:hover, &.Mui-hovered': {\r\n                        backgroundColor: theme.palette.divider,\r\n                        '@media (hover: none)': {\r\n                            backgroundColor: 'transparent',\r\n                        },\r\n                    },\r\n                } : {},\r\n                ...props.sx\r\n            }}\r\n            slots={{ pagination: CustomPagination, toolbar: CustomToolbar, ...props.slots }}\r\n            // slotProps={{\r\n            //     toolbar: {\r\n            //         showQuickFilter: true,\r\n            //         printOptions: { disableToolbarButton: true },\r\n            //         csvOptions: { disableToolbarButton: true },\r\n            //     },\r\n            // }}\r\n            // style={{ backgroundColor: 'white' }}\r\n            initialState={{\r\n                pagination: {\r\n                    paginationModel: {\r\n                        pageSize: props.pageSize ?? 10,\r\n                        /* page: 0 // default value will be used if not passed */\r\n                    },\r\n                },\r\n            }}\r\n            pageSizeOptions={[10, 25, 50, 100]}\r\n            autoHeight={true}\r\n            disableRowSelectionOnClick\r\n            disableColumnMenu\r\n            disableColumnFilter\r\n            disableColumnSelector\r\n            disableDensitySelector\r\n        />\r\n    );\r\n};\r\n","import React, { useEffect, useState } from 'react';\r\n\r\n// project imports\r\nimport MainCard from 'components/MainCard';\r\nimport CustomGrid from 'components/DataGrid';\r\nimport { GetBuildHistory } from 'api/ProjectsApi';\r\nimport { GetAll } from 'api/ProjectsApi';\r\n\r\n// third-party\r\nimport moment from 'moment';\r\n\r\n// ==============================|| BUILD HISTORY PAGE ||============================== //\r\n\r\nconst BuildHistoryPage = () => {\r\n    const [loading, setLoading] = useState(true);\r\n    const [builds, setBuilds] = useState([]);\r\n    const [projects, setProjects] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                // Önce projeleri çek\r\n                const projectsResponse = await GetAll();\r\n                const projectsData = projectsResponse.data.value || [];\r\n                setProjects(projectsData);\r\n\r\n                // Sonra her proje için build history'yi çek\r\n                const buildsData = [];\r\n                for (const project of projectsData) {\r\n                    try {\r\n                        const buildsResponse = await GetBuildHistory(project.name);\r\n                        if (buildsResponse.data.count > 0) {\r\n                            buildsResponse.data.value.forEach(build => {\r\n                                buildsData.push({\r\n                                    id: build.id,\r\n                                    projectName: project.name,\r\n                                    buildNumber: build.buildNumber,\r\n                                    status: build.status,\r\n                                    result: build.result,\r\n                                    reason: build.reason,\r\n                                    createdOn: build.createdOn,\r\n                                    finishedOn: build.finishedOn\r\n                                });\r\n                            });\r\n                        }\r\n                    } catch (error) {\r\n                        console.error(`Error fetching builds for project ${project.name}:`, error);\r\n                    }\r\n                }\r\n                setBuilds(buildsData);\r\n                setLoading(false);\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const columns = [\r\n        { field: 'id', headerName: 'ID', width: 90, headerAlign: 'center', align: 'center' },\r\n        { field: 'projectName', headerName: 'Project Name', width: 150 },\r\n        { field: 'buildNumber', headerName: 'Build Number', width: 150 },\r\n        { field: 'status', headerName: 'Status', width: 110, headerAlign: 'center', align: 'center' },\r\n        { field: 'result', headerName: 'Result', width: 110, headerAlign: 'center', align: 'center' },\r\n        { field: 'reason', headerName: 'Reason', width: 120, headerAlign: 'center', align: 'center' },\r\n        {\r\n            field: 'createdOn',\r\n            headerName: 'Created On',\r\n            width: 180,\r\n            renderCell: (params) => Boolean(params.value) && moment(params.value).format('LLL')\r\n        },\r\n        {\r\n            field: 'finishedOn',\r\n            headerName: 'Finished On',\r\n            width: 180,\r\n            renderCell: (params) => Boolean(params.value) && moment(params.value).format('LLL')\r\n        }\r\n    ];\r\n\r\n    return (\r\n        <MainCard title=\"Build History\">\r\n            <CustomGrid\r\n                rows={Array.isArray(builds) ? builds : []}\r\n                columns={columns}\r\n                // getRowId={() => crypto.randomUUID()}\r\n                getRowHeight={() => 'auto'}\r\n                loading={loading}\r\n            />\r\n        </MainCard>\r\n    );\r\n};\r\n\r\nexport default BuildHistoryPage;\r\n"],"names":["Pagination","_ref","page","onPageChange","className","apiRef","useGridApiContext","pageCount","useGridSelector","gridPageCountSelector","_jsx","MuiPagination","variant","shape","color","count","onChange","event","newPage","CustomPagination","props","GridPagination","_objectSpread","ActionsComponent","CustomToolbar","Portal","container","document","getElementById","children","GridToolbarQuickFilter","size","GridSkeleton","_props$pageSize","theme","useTheme","intl","useIntl","localeText","useMemo","language","trTR","components","MuiDataGrid","defaultProps","enUS","DataGrid","MuiTablePagination","labelDisplayedRows","_ref2","from","to","concat","ignoreDiacritics","getRowClassName","params","indexRelativeToCurrentPage","sx","_defineProperty","gridClasses","row","palette","mode","ThemeMode","LIGHT","backgroundColor","background","default","divider","slots","pagination","toolbar","initialState","paginationModel","pageSize","pageSizeOptions","autoHeight","disableRowSelectionOnClick","disableColumnMenu","disableColumnFilter","disableColumnSelector","disableDensitySelector","_useState","useState","_useState2","_slicedToArray","loading","setLoading","_useState3","_useState4","builds","setBuilds","_useState5","_useState6","setProjects","useEffect","fetchData","_asyncToGenerator","_regeneratorRuntime","mark","_callee","projectsResponse","projectsData","buildsData","_iterator","_step","_loop","wrap","_context2","prev","next","GetAll","sent","data","value","_createForOfIteratorHelper","project","buildsResponse","_context","GetBuildHistory","name","forEach","build","push","id","projectName","buildNumber","status","result","reason","createdOn","finishedOn","t0","console","error","stop","s","n","done","delegateYield","t1","e","f","finish","t2","apply","arguments","columns","field","headerName","width","headerAlign","align","renderCell","Boolean","moment","format","MainCard","title","CustomGrid","rows","Array","isArray","getRowHeight"],"sourceRoot":""}